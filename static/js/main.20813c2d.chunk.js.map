{"version":3,"sources":["component.section1.js","App.js","serviceWorker.js","index.js"],"names":["Section1BoxLeft","props","react_default","a","createElement","className","text","Section1BoxRight","Section1Boxes","show","Section1","sectionElement","useRef","_useState","useState","isInView","rect","_useState2","Object","slicedToArray","state","setState","useEffect","scrollListener","elRect","current","getBoundingClientRect","top","bottom","document","documentElement","clientHeight","window","addEventListener","removeEventListener","ref","App","component_section1","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAGA,SAASA,EAAgBC,GACvB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYJ,EAAMK,MAG1C,SAASC,EAAiBN,GACxB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMK,MAG3C,SAASE,EAAcP,GACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAYJ,EAAMQ,KAAO,eAAiB,gBAC7CP,EAAAC,EAAAC,cAACJ,EAAD,CAAiBM,KAAK,SACtBJ,EAAAC,EAAAC,cAACG,EAAD,CAAkBD,KAAK,WAiDdI,MA5Cf,WAGE,IAAMC,EAAiBC,iBAAO,MAHZC,EASQC,mBAJP,CACjBC,UAAU,EACVC,KAAM,OAPUC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GASXO,EATWH,EAAA,GASJI,EATIJ,EAAA,GAqClB,OAzBAK,oBAAU,WAGR,IAAIC,EAAiB,WACnB,IAAMC,EAASb,EAAec,QAAQC,wBACnCF,GACDH,EAAS,CACPL,KAAMQ,EACNT,SAAWS,EAAOG,KAAO,KAAOH,EAAOI,QAAUC,SAASC,gBAAgBC,gBAWhF,OAFAC,OAAOC,iBAAiB,SAAUV,GAE3B,WACLS,OAAOE,oBAAoB,SAAUX,MAMvCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW8B,IAAKxB,GAC7BT,EAAAC,EAAAC,cAACI,EAAD,CAAeC,KAAMW,EAAML,aC3ClBqB,MAXf,WACE,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,gBAEJH,EAAAC,EAAAC,cAACiC,EAAD,QCCcC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASf,SAASgB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.20813c2d.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef} from 'react'\r\nimport './Section1.css'\r\n\r\nfunction Section1BoxLeft(props) {\r\n  return(<div className=\"box left\">{props.text}</div>);\r\n}\r\n\r\nfunction Section1BoxRight(props) {\r\n  return(<div className=\"box right\">{props.text}</div>);\r\n}\r\n\r\nfunction Section1Boxes(props){\r\n  return(\r\n    <div className={ props.show ? 'animate-show' : 'animate-hide' }>\r\n      <Section1BoxLeft text=\"left\" />\r\n      <Section1BoxRight text=\"right\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Section1() {\r\n\r\n  // Refs -------------------------\r\n  const sectionElement = useRef(null);\r\n  // States -----------------------\r\n  var initialState = {\r\n    isInView: false,\r\n    rect: null\r\n  };\r\n  const [state, setState] = useState(initialState);\r\n\r\n  // Hooks ------------------------\r\n  useEffect(() => {\r\n    // const rect = this.selector.current.getBoundingClientRect();\r\n\r\n    var scrollListener = function(){\r\n      const elRect = sectionElement.current.getBoundingClientRect();\r\n      if(elRect){\r\n        setState({\r\n          rect: elRect,\r\n          isInView: (elRect.top <= 150 || elRect.bottom <= document.documentElement.clientHeight),\r\n        });\r\n      };\r\n      // setState({\r\n      //   topPos: rect.top,\r\n      //   bottomPos: rect.bottomPos,\r\n      // });\r\n    };\r\n\r\n    window.addEventListener('scroll', scrollListener);\r\n\r\n    return function cleanup() {\r\n      window.removeEventListener('scroll', scrollListener);\r\n    };\r\n  });\r\n  // ------------------------------\r\n\r\n  return (\r\n    <div className=\"Section1\" ref={sectionElement}>\r\n      <Section1Boxes show={state.isInView} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Section1;\r\n","import React from 'react';\nimport './App.css';\n\nimport Section1 from './component.section1.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <h1 className=\"header-title\">Scroll Demo</h1>\n      </header>\n      <Section1 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}