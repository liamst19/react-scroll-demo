{"version":3,"sources":["util.js","component.SlideInBoxes.js","component.ScrollMarquee.js","component.JapaneseText.js","App.js","serviceWorker.js","index.js"],"names":["elementIsInView","element","offset","arguments","length","undefined","elRect","current","getBoundingClientRect","viewportHeight","document","documentElement","clientHeight","top","bottom","SlideInBox","props","react_default","a","createElement","className","boxClass","text","SlideInBoxes","refElement","useRef","_useState","useState","showBoxes","_useState2","Object","slicedToArray","state","setState","useEffect","scrollListener","window","addEventListener","removeEventListener","ref","ScrollMarquee","motionScale","initMargin","direction","lastScrollY","margin","style","marginLeft","currentScrollY","scrollY","motion","newMargin","scrollPosY","JpTxtParagraph","paragraphType","JapaneseText","fetch","process","url","then","response","json","data","paragraphs","split","forEach","p","push","getParagraphs","App","title","src_component_ScrollMarquee","src_component_SlideInBoxes","component_JapaneseText","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97a3b424.chunk.js","sourcesContent":["\n\n  // Check to see if element is in viewport\nexport const elementIsInView = (element, offset = 0) => {\n  // Get the dimensions of Section element\n  const elRect = element.current.getBoundingClientRect();\n  const viewportHeight = document.documentElement.clientHeight;\n\n  return (elRect != null)\n    && (elRect.top <= offset\n        || elRect.bottom <= viewportHeight);\n};\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { elementIsInView } from './util.js';\r\nimport './component.SlideInBoxes.css';\r\n\r\nfunction SlideInBox(props) {\r\n  return(<div className={ 'box ' + props.boxClass }>\r\n         <span className=\"boxText\">\r\n         { props.text }\r\n         </span>\r\n         </div>);\r\n}\r\n\r\nfunction SlideInBoxes() {\r\n  const viewportOffset = 150;\r\n\r\n  // Refs -------------------------\r\n  const refElement = useRef(null);\r\n\r\n  // States -----------------------\r\n  const [state, setState] = useState({\r\n    showBoxes: false,\r\n  });\r\n\r\n  // Hooks ------------------------\r\n  useEffect(() => {\r\n\r\n    setState({\r\n      showBoxes: elementIsInView(refElement, viewportOffset),\r\n    });\r\n\r\n    // Event Listener\r\n    let scrollListener = () => {\r\n      setState({\r\n        showBoxes: elementIsInView(refElement, viewportOffset),\r\n      });\r\n    };\r\n\r\n    // Add Event Listener\r\n    window.addEventListener('scroll', scrollListener);\r\n\r\n    // Remove Event Listener upon component cleanup\r\n    return function cleanup() {\r\n      window.removeEventListener('scroll', scrollListener);\r\n    };\r\n  }, []);\r\n\r\n  // ------------------------------\r\n  // Render Component -------------\r\n  return (\r\n      <div className={state.showBoxes ? 'SlideInBoxes animate-show' : 'SlideInBoxes animate-hide'}  ref={refElement}>\r\n      <SlideInBox boxClass=\"left\"  text=\"aw\" />\r\n      <SlideInBox boxClass=\"right\" text=\"yeah.\" />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SlideInBoxes;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { elementIsInView } from './util.js';\r\nimport './component.ScrollMarquee.css';\r\n\r\nfunction ScrollMarquee(props) {\r\n  const viewportOffset = 150;\r\n\r\n  // Motion Scaling\r\n  let motionScale = 1;\r\n  let initMargin = 0;\r\n  if(props.direction === 'left' && props.motionScale !== 0){\r\n    motionScale = props.motionScale;\r\n    initMargin = 25;\r\n  } else if(props.direction === 'right' && props.motionScale !== 0){\r\n    motionScale = -1 * props.motionScale;\r\n    initMargin = -500;\r\n  }\r\n\r\n  // Refs -------------------------\r\n  const refElement = useRef(null);\r\n\r\n  // States -----------------------\r\n  const [state, setState] = useState({\r\n    lastScrollY: 0,\r\n    margin: initMargin,\r\n    style: {\r\n      marginLeft: initMargin,\r\n    },\r\n  });\r\n\r\n  // Functions --------------------\r\n\r\n  // Update marquee position\r\n  let updateMargin = (margin, scrollPosY) => {\r\n    // Set element margin\r\n    refElement.current.style.marginLeft = margin;\r\n    // Initialize margin when component is loaded\r\n    setState({\r\n      lastScrollY: scrollPosY,\r\n      margin: margin,\r\n      style: {\r\n        marginLeft: margin,\r\n      }\r\n    });\r\n  };\r\n\r\n  // Hooks ------------------------\r\n  useEffect(() => {\r\n\r\n    // Event Listener\r\n    let scrollListener = () => {\r\n      // Only move the marquee when the element is visible inside viewport\r\n      if(elementIsInView(refElement, viewportOffset)){\r\n        const currentScrollY = window.scrollY;\r\n        const motion = (currentScrollY - state.lastScrollY) * motionScale;\r\n        const newMargin = state.margin - motion;\r\n        updateMargin(newMargin, currentScrollY);\r\n      };\r\n    };\r\n\r\n    // Add Event Listener\r\n    window.addEventListener('scroll', scrollListener);\r\n\r\n    // Remove Event Listener upon component cleanup\r\n    return function cleanup() {\r\n      window.removeEventListener('scroll', scrollListener);\r\n    };\r\n  }, [state.margin, state.lastScrollY, motionScale]);\r\n\r\n  // ------------------------------\r\n  // Render Component -------------\r\n  return (\r\n    <div className=\"ScrollMarquee\" style={ state.style } ref={ refElement }>\r\n      <div className=\"marqueeText\">\r\n        { props.text }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScrollMarquee;\r\n","import React, { useState } from 'react';\r\n// import { elementIsInView } from './util.js';\r\n\r\nfunction JpTxtParagraph(props) {\r\n  return (\r\n    <p className={ props.paragraphType  }>\r\n      {props.text}\r\n    </p>\r\n  );\r\n};\r\n\r\nfunction JapaneseText(props) {\r\n\r\n  const [state, setState] = useState({\r\n    text: 'loading..',\r\n  });\r\n\r\n  let getParagraphs = (text) => {\r\n    let paragraphs = [];\r\n    let ps = text.split('/n');\r\n    ps.forEach((p) => {\r\n      paragraphs.push(<JpTxtParagraph text={ p } />);\r\n    });\r\n    return paragraphs;\r\n  };\r\n\r\n  fetch(process.env.PUBLIC_URL + '/' + props.url)\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      setState({\r\n        text: data.text,\r\n      });\r\n    });\r\n\r\n  return (\r\n    <div className=\"JapaneseText\">\r\n      <div className=\"wrapper\">\r\n        { getParagraphs(state.text) }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JapaneseText;\r\n","import React, { useEffect } from 'react';\nimport './App.css';\n\nimport SlideInBoxes from './component.SlideInBoxes.js';\nimport ScrollMarquee from './component.ScrollMarquee.js';\nimport JapaneseText from './component.JapaneseText.js';\n\nfunction App() {\n\n  // Hook ------------------------------------\n  useEffect(() => {\n    document.title = 'Scroll Demo';\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <h1 className=\"header-title\">Scroll Demo</h1>\n      </header>\n      <div className=\"ScrollMarqueeContainer\">\n      <ScrollMarquee motionScale=\"0.6\" text=\"text is moving leftward.\" direction=\"left\" />\n      <ScrollMarquee motionScale=\"0.5\" text=\"rightward text motion.\" direction=\"right\" />\n      </div>\n      <SlideInBoxes />\n      <JapaneseText url=\"wagahai.json\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}