{"version":3,"sources":["util.js","component.SlideInBoxes.js","component.ScrollMarquee.js","App.js","serviceWorker.js","index.js"],"names":["elementIsInView","element","offset","elRect","current","getBoundingClientRect","viewportHeight","document","documentElement","clientHeight","top","bottom","SlideInBox","props","className","boxClass","text","SlideInBoxes","refElement","useRef","useState","showBoxes","state","setState","useEffect","scrollListener","window","addEventListener","removeEventListener","ref","ScrollMarquee","motionScale","initMargin","direction","lastScrollY","margin","style","marginLeft","currentScrollY","scrollY","motion","newMargin","scrollPosY","App","title","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dbc0b80e.chunk.js","sourcesContent":["\n\n  // Check to see if element is in viewport\nexport const elementIsInView = (element, offset = 0) => {\n  // Get the dimensions of Section element\n  const elRect = element.current.getBoundingClientRect();\n  const viewportHeight = document.documentElement.clientHeight;\n\n  return (elRect != null)\n    && (elRect.top <= offset\n        || elRect.bottom <= viewportHeight);\n};\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { elementIsInView } from './util.js';\r\nimport './component.SlideInBoxes.css';\r\n\r\nfunction SlideInBox(props) {\r\n  return(<div className={ 'box ' + props.boxClass }>\r\n         <span className=\"boxText\">\r\n         { props.text }\r\n         </span>\r\n         </div>);\r\n}\r\n\r\nfunction SlideInBoxes() {\r\n  const viewportOffset = 150;\r\n\r\n  // Refs -------------------------\r\n  const refElement = useRef(null);\r\n\r\n  // States -----------------------\r\n  const [state, setState] = useState({\r\n    showBoxes: false,\r\n  });\r\n\r\n  // Hooks ------------------------\r\n  useEffect(() => {\r\n\r\n    setState({\r\n      showBoxes: elementIsInView(refElement, viewportOffset),\r\n    });\r\n\r\n    // Event Listener\r\n    let scrollListener = () => {\r\n      setState({\r\n        showBoxes: elementIsInView(refElement, viewportOffset),\r\n      });\r\n    };\r\n\r\n    // Add Event Listener\r\n    window.addEventListener('scroll', scrollListener);\r\n\r\n    // Remove Event Listener upon component cleanup\r\n    return function cleanup() {\r\n      window.removeEventListener('scroll', scrollListener);\r\n    };\r\n  }, []);\r\n\r\n  // ------------------------------\r\n  // Render Component -------------\r\n  return (\r\n      <div className={state.showBoxes ? 'SlideInBoxes animate-show' : 'SlideInBoxes animate-hide'}  ref={refElement}>\r\n      <SlideInBox boxClass=\"left\"  text=\"aw\" />\r\n      <SlideInBox boxClass=\"right\" text=\"yeah.\" />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SlideInBoxes;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { elementIsInView } from './util.js';\r\nimport './component.ScrollMarquee.css';\r\n\r\nfunction ScrollMarquee(props) {\r\n  const viewportOffset = 150;\r\n\r\n  // Motion Scaling\r\n  let motionScale = 1;\r\n  let initMargin = 0;\r\n  if(props.direction === 'left' && props.motionScale !== 0){\r\n    motionScale = props.motionScale;\r\n    initMargin = 25;\r\n  } else if(props.direction === 'right' && props.motionScale !== 0){\r\n    motionScale = -1 * props.motionScale;\r\n    initMargin = -500;\r\n  }\r\n\r\n  // Refs -------------------------\r\n  const refElement = useRef(null);\r\n\r\n  // States -----------------------\r\n  const [state, setState] = useState({\r\n    lastScrollY: 0,\r\n    margin: initMargin,\r\n    style: {\r\n      marginLeft: initMargin,\r\n    },\r\n  });\r\n\r\n  // Functions --------------------\r\n\r\n  // Update marquee position\r\n  let updateMargin = (margin, scrollPosY) => {\r\n    // Set element margin\r\n    refElement.current.style.marginLeft = margin;\r\n    // Initialize margin when component is loaded\r\n    setState({\r\n      lastScrollY: scrollPosY,\r\n      margin: margin,\r\n      style: {\r\n        marginLeft: margin,\r\n      }\r\n    });\r\n  };\r\n\r\n  // Hooks ------------------------\r\n  useEffect(() => {\r\n\r\n    // Event Listener\r\n    let scrollListener = () => {\r\n      // Only move the marquee when the element is visible inside viewport\r\n      if(elementIsInView(refElement, viewportOffset)){\r\n        const currentScrollY = window.scrollY;\r\n        const motion = (currentScrollY - state.lastScrollY) * motionScale;\r\n        const newMargin = state.margin - motion;\r\n        updateMargin(newMargin, currentScrollY);\r\n      };\r\n    };\r\n\r\n    // Add Event Listener\r\n    window.addEventListener('scroll', scrollListener);\r\n\r\n    // Remove Event Listener upon component cleanup\r\n    return function cleanup() {\r\n      window.removeEventListener('scroll', scrollListener);\r\n    };\r\n  }, [state.margin, state.lastScrollY, motionScale]);\r\n\r\n  // ------------------------------\r\n  // Render Component -------------\r\n  return (\r\n    <div className=\"ScrollMarquee\" style={ state.style } ref={ refElement }>\r\n      <div className=\"marqueeText\">\r\n        { props.text }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScrollMarquee;\r\n","import React, { useEffect } from 'react';\nimport './App.css';\n\nimport SlideInBoxes  from './component.SlideInBoxes.js';\nimport ScrollMarquee from './component.ScrollMarquee.js';\nimport JapaneseText  from './component.JapaneseText.js';\n\nfunction App() {\n\n  // Hook ------------------------------------\n  useEffect(() => {\n    document.title = 'Scroll Demo';\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <h1 className=\"header-title\">Scroll Demo</h1>\n      </header>\n      <div className=\"ScrollMarqueeContainer\">\n      <ScrollMarquee motionScale=\"0.6\" text=\"text is moving leftward.\" direction=\"left\" />\n      <ScrollMarquee motionScale=\"0.5\" text=\"rightward text motion.\"   direction=\"right\" />\n      </div>\n      <SlideInBoxes />\n      {/* <JapaneseText url=\"wagahai.json\" /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// serviceWorker.unregister();\n"],"sourceRoot":""}